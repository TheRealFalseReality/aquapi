substitutions:
  # names
  name: "aquapi"
  friendly_name: "AquaPi"
  # App Version - Updated: 8/2023
  app_version: "1.3.1"
  # Import Config
  import_config: "false"
  # Logger Level
  # Can use VERBOSE for more information
  logger: "DEBUG"

  # pins
  dallasPin: "16"
  opticalHighPin: "33" # blue
  opticalLowPin: "32" # yellow
  auxPin1: "26" # blue
  auxPin2: "27" # yellow
  sdaPin: "21" # blue
  sclPin: "22" # yellow
  
  # EZO Circuit Addresses
  # pH circuit, who's address is 99
  addPH: "99"
  # EC circuit, who's address is 100
  addEC: "100"
  # DO circuit, who's address is 97
  addDO: "97"
  # RTD circuit, who's address is 102
  addRTD: "102"
  # PMP circuit, who's address is 103
  addPMP: "103"
  # HUM circuit, who's address is 111
  addHUM: "111"
  # CO2 circuit, who's address is 105
  addCO2: "105"

  # Calibration variables
  # 0C using Ice Water; 100C using Boiling Water  
  # Calibration Temp. 1
  cal_0: "0.0"
  cal_100: "100.0"
  # Calibration Temp. 2
  cal_0_2: "0.0"
  cal_100_2: "100.0"

  # Sensor update intevals. 60s = 1 minute, never = disable updates
  # Water Level
  update_water: "60s"
  # Temp. Probes
  update_temp: "60s"
  # EZO pH
  update_ph: "60s"
  # EZO EC
  update_ec: "60s"
  # EZO DO
  update_do: "60s"
  # EZO RTD
  update_rtd: "60s"
  # EZO PMP
  update_pmp: "60s"
  # EZO HUM
  update_hum: "60s"
  # EZO CO2
  update_co2: "60s"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  # Automatically add the mac address to the name
  name_add_mac_suffix: true
  comment: AquaPi ESP32 - Aquarium Controller & Monitor
  project:
    name: TheRealFalseReality.aquapi
    version: "${app_version}"
  on_boot: 
    priority: 200
    then:
      - component.update: water_level
      - button.press: read_ec

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: "${logger}"

# Enable Home Assistant API
api:

ota:

dashboard_import:
  package_import_url: github://TheRealFalseReality/aquapi/aquapi_config.yaml@main
  import_full_config: ${import_config}

wifi: 
  ap:

captive_portal:

web_server:

# Sets up Bluetooth LE (Only on ESP32) to allow the user to provision wifi credentials to the device.
esp32_improv:
  authorizer: none
  
improv_serial:

# i2c Pins
i2c:
  sda: ${sdaPin}
  scl: ${sclPin}
  scan: true
  id: bus_a

# Internal Blue LED
light:
  - platform: status_led
    pin: GPIO2
    id: internal_led

# 18B20 sensor Pin
dallas:
  - pin: ${dallasPin}
    update_interval: "${update_temp}"
    
interval:
  - interval: ${update_ec}
    then:
      - button.press: read_ec

sensor:
  # Internal Magnetic Sensor
  - platform: esp32_hall
    name: "ESP32 Hall Sensor"
    entity_category: "diagnostic"

  # Internal Temp.
  - platform: internal_temperature
    name: "Internal Temperature"

  # Wifi Signal 
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    entity_category: "diagnostic"

  # Wifi %
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

  # Uptime sensor
  - platform: uptime
    name: Uptime

  # of I2C devices connected
  - platform: template
    name: "I2C Devices Connected"
    id: i2c_devices
    icon: mdi:integrated-circuit-chip
    entity_category: "diagnostic"
    disabled_by_default: true
    lambda: |-
      byte error, address;
      int nDevices;
      nDevices = 0;
      for(address = 1; address < 127; address++) {
        Wire.beginTransmission(address);
        error = Wire.endTransmission();
        if (error == 0) {
          nDevices++;
        }
      }
      return nDevices;

  # EZO Circuits (yellow - SCL/RX, blue - SDA/TX)
  # EZO Circuit - pH
  - platform: ezo
    icon: mdi:ph
    name: "pH"
    id: ph_ezo
    address: ${addPH}
    unit_of_measurement: ""
    accuracy_decimals: 2
    update_interval: "${update_ph}"
    state_class: "measurement"
    device_class: PH

  # EZO Circuit - EC
  # Conductivity Probe
  - platform: ezo
    icon: mdi:shaker-outline
    # name: "Salinity"
    id: ec_ezo
    address: ${addEC}
    unit_of_measurement: "ppt"
    accuracy_decimals: 2
    update_interval: "${update_ec}"
    state_class: "measurement"
    on_custom: 
      then:
        - lambda: 
            id(raw_value_ec).publish_state(x);
    # on_calibration: 
    #   then:
    #     - lambda: 
    #         id(result_ec).publish_state(x);
    # on_device_information: 
    #   then:
    #     - lambda: 
    #         id(result_ec).publish_state(x);
    # on_slope: 
    #   then:
    #     - lambda: 
    #         id(result_ec).publish_state(x);
    # on_t: 
    #   then:
    #     - lambda: 
    #         id(result_ec).publish_state(x);

  # Conductivity
  - platform: template
    name: Conductivity
    id: sensor_conductivity
    icon: mdi:lightning-bolt-outline
    unit_of_measurement: "uS/cm"
    accuracy_decimals: 0
    update_interval: "${update_ec}"
    state_class: "measurement"
    lambda: |-
      std::string str = id(raw_value_ec).state;
      std::vector<std::string> v;
      char * token;
      char seps[] = ",";
      token = strtok (&str[0],seps);
      while (token != NULL) {
        v.push_back(token);
        token = strtok (NULL, seps);
      }
      if (v.size() == 4) {
        return std::stof(v[0]);
      } 
      else {
        return 0;
      }

  # TDS
  - platform: template
    name: TDS
    id: sensor_tds
    unit_of_measurement: "mg/L"
    icon: mdi:water-opacity
    accuracy_decimals: 0
    update_interval: "${update_ec}"
    state_class: "measurement"
    lambda: |-
      std::string str = id(raw_value_ec).state;
      std::vector<std::string> v;
      char * token;
      char seps[] = ",";
      token = strtok (&str[0],seps);
      while (token != NULL) {
        v.push_back(token);
        token = strtok (NULL, seps);
      }
      if (v.size() == 4) {
        return std::stof(v[1]);
      } 
      else {
        return 0;
      }

  # Salinity
  - platform: template
    name: Salinity
    id: sensor_salinity
    icon: mdi:shaker-outline
    unit_of_measurement: "ppt"
    accuracy_decimals: 2
    update_interval: "${update_ec}"
    state_class: "measurement"
    lambda: |-
      std::string str = id(raw_value_ec).state;
      std::vector<std::string> v;
      char * token;
      char seps[] = ",";
      token = strtok (&str[0],seps);
      while (token != NULL) {
        v.push_back(token);
        token = strtok (NULL, seps);
      }
      if (v.size() == 4) {
        return std::stof(v[2]);
      } 
      else {
        return NULL;
      }

  # Specific Gravity
  - platform: template
    name: Specific Gravity
    id: sensor_specific_gravity
    icon: mdi:cup-water
    unit_of_measurement: ""
    accuracy_decimals: 3
    update_interval: "${update_ec}"
    state_class: "measurement"
    lambda: |-
      std::string str = id(raw_value_ec).state;
      std::vector<std::string> v;
      char * token;
      char seps[] = ",";
      token = strtok (&str[0],seps);
      while (token != NULL) {
        v.push_back(token);
        token = strtok (NULL, seps);
      }
      if (v.size() == 4) {
        return std::stof(v[3]);
      } 
      else {
        return NULL;
      }


  # EZO Circuit - RTD
  # Temperature
  - platform: ezo
    icon: mdi:thermometer-lines
    name: "Temperature EZO"
    id: temp_ezo
    address: ${addRTD}
    # unit_of_measurement: "Â°C"
    accuracy_decimals: 2
    update_interval: "${update_rtd}"
    state_class: "measurement"
    device_class: "temperature"
    disabled_by_default: true

  # EZO Circuit - HUM
  # Humidity
  - platform: ezo
    icon: mdi:water-percent
    name: "Humidity"
    id: hum_ezo
    address: ${addHUM}
    unit_of_measurement: "%"
    accuracy_decimals: 2
    update_interval: "${update_hum}"
    state_class: "measurement"
    device_class: "humidity"
    disabled_by_default: true

  # EZO Circuit - CO2
  # Cardbon Dioxide
  - platform: ezo
    icon: mdi:molecule-co2
    name: "Cardbon Dioxide"
    id: co2_ezo
    address: ${addCO2}
    unit_of_measurement: "ppm"
    accuracy_decimals: 2
    update_interval: "${update_co2}"
    state_class: "measurement"
    device_class: "carbon_dioxide"
    disabled_by_default: true

  # EZO Circuit - Dissolved Oxygen
  - platform: ezo
    icon: mdi:molecule
    name: "Dissolved Oxygen"
    id: do_ezo
    address: ${addDO}
    unit_of_measurement: "mg/L"
    accuracy_decimals: 2
    update_interval: "${update_do}"
    state_class: "measurement"
    disabled_by_default: true

  # EZO Circuit - Pump
  - platform: ezo
    icon: mdi:pump
    name: "Pump"
    id: pmp_ezo
    address: ${addPMP}
    unit_of_measurement: ""
    accuracy_decimals: 2
    update_interval: "${update_pmp}"
    state_class: "measurement"
    disabled_by_default: true

  # Temperature Probe 1
  - platform: dallas
    id: temp_1
    icon: mdi:thermometer-lines
    index: 0
    name: "Temperature"
    filters:
      - calibrate_linear:
          method: least_squares
          datapoints:
            - 0.0 -> ${cal_0}
            - 100.0 -> ${cal_100}
    on_value: 
      then:
        - component.update: temp_range

  # Temperature Probe 2
  - platform: dallas
    id: temp_2
    icon: mdi:thermometer-lines
    index: 1
    name: "Temperature 2"
    filters:
      - calibrate_linear:
          method: least_squares
          datapoints:
            - 0.0 -> ${cal_0_2}
            - 100.0 -> ${cal_100_2}
    disabled_by_default: true
    on_value: 
      then:
        - component.update: temp_range_2
    
  # Convert to Fahrenheit - Temp. 1
  - platform: template
    # name: Temperature 1 - Fahrenheit
    disabled_by_default: true
    id: temp_f
    lambda: |-
      return id(temp_1).state * 9 / 5 + 32;

  # Convert to Fahrenheit - Temp. 2
  - platform: template
    # name: Temperature 2 - Fahrenheit
    disabled_by_default: true
    id: temp_f_2
    lambda: |-
      return id(temp_2).state * 9 / 5 + 32;

  # Calibration Temp. at 0C
  - platform: template
    name: Calibration at 0Â°C - Temp. 1
    id: cal_0_sen
    icon: mdi:snowflake-alert
    unit_of_measurement: "Â°C"
    disabled_by_default: true
    entity_category: "diagnostic"
    lambda: |-
      return {${cal_0}};

  # Calibration Temp. at 100C
  - platform: template
    name: Calibration at 100Â°C - Temp. 1
    id: cal_100_sen
    icon: mdi:water-thermometer
    unit_of_measurement: "Â°C"
    disabled_by_default: true
    entity_category: "diagnostic"
    lambda: |-
      return {${cal_100}};

  # Calibration Temp. 2 at 0C
  - platform: template
    name: Calibration at 0Â°C  - Temp. 2
    id: cal_0_2_sen
    icon: mdi:snowflake-alert
    unit_of_measurement: "Â°C"
    disabled_by_default: true
    entity_category: "diagnostic"
    lambda: |-
      return {${cal_0_2}};

  # Calibration Temp. 2 at 100C
  - platform: template
    name: Calibration at 100Â°C - Temp. 2
    id: cal_100_2_sen
    icon: mdi:water-thermometer
    unit_of_measurement: "Â°C"
    disabled_by_default: true
    entity_category: "diagnostic"
    lambda: |-
      return {${cal_100_2}};

binary_sensor:
  # Aquapi API Status
  - platform: status
    name: "Status"
    
  # Optical Sensor - LOW (yellow)
  - platform: gpio
    id: os_low
    pin: 
      number: ${opticalLowPin}
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Optical Sensor: Low"
    filters:
      - delayed_on_off: 30ms
    on_state:
      then:
        component.update: water_level

  # Optical Sensor - HIGH (blue)
  - platform: gpio
    id: os_high
    pin: 
      number: ${opticalHighPin}
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Optical Sensor: High"
    filters:
      - delayed_on_off: 30ms
    on_state:
      then:
        component.update: water_level

  - platform: gpio
    id: aux_1
    pin: 
      number: ${auxPin1}
      inverted: true
      mode:
        input: true
        pullup: true
    name: Aux 1
    filters:
      - delayed_on_off: 30ms

  - platform: gpio
    id: aux_2
    pin: 
      number: ${auxPin2}
      inverted: true
      mode:
        input: true
        pullup: true
    name: Aux 2
    filters:
      - delayed_on_off: 30ms

text_sensor: 
  # Hostname
  - platform: template
    name: "Hostname"
    id: hostname
    icon: mdi:cellphone-arrow-down
    lambda: |-
      return {"${name}"};
    entity_category: "diagnostic"

  # Wifi Info
  - platform: wifi_info
    ip_address:
      name: IP Address
      icon: mdi:ip-network
    ssid:
      name: Connected SSID
      icon: mdi:wifi-arrow-left-right
    bssid:
      name: Connected BSSID
      icon: mdi:wifi-star
    mac_address:
      name: Mac Address
      icon: mdi:chip

  # AquaPi Version
  - platform: template
    name: "AquaPi Version"
    id: aquapi_version
    icon: mdi:update
    update_interval: 600s
    lambda: |-
      return {"${app_version}"};
    entity_category: "diagnostic"

  # GitHub Project URL
  - platform: template
    name: GitHub
    id: github
    icon: mdi:github
    lambda: |-
      return {"github.com/TheRealFalseReality/aquapi"};
    entity_category: "diagnostic"

  # Water Level
  - platform: template
    icon: mdi:waves-arrow-up
    name: "Water Level"
    id: water_level
    update_interval: "${update_water}"
    lambda: |-
      if(id(os_high).state == true && id(os_low).state == true) {
        // Water Level is High
        return {"High"};
      }
      if(id(os_high).state == false && id(os_low).state == false) {
        // Water Level is Low
        return {"Low"};
      }
      if(id(os_high).state == false && id(os_low).state == true) {
        // Water Level is Normal
        return {"Normal"};
      } else {
        return {"Uknown or Error"};
      }
    
  # Temperature Range 1
  - platform: template
    name: Temperature Range
    id: temp_range
    icon: mdi:thermometer-water
    update_interval: "${update_temp}"
    lambda: |-
      if(id(temp_f).state <= id(range_cool).state) {
        return {"Cool"};
      }
      if(id(temp_f).state < id(range_warm).state && id(temp_f).state > id(range_cool).state) {
        return {"OK"};
      }
      if(id(temp_f).state >= id(range_warm).state) {
        return {"Warm"};
      }     
      else {
        return {"Unknown"};
      }  

  # Temperature Range 2
  - platform: template
    name: Temperature 2 Range
    id: temp_range_2
    icon: mdi:thermometer-water
    update_interval: "${update_temp}"
    disabled_by_default: true
    lambda: |-
      if(id(temp_f_2).state <= id(range_cool).state) {
        return {"Cool"};
      }
      if(id(temp_f_2).state < id(range_warm).state && id(temp_f_2).state > id(range_cool).state) {
        return {"OK"};
      }
      if(id(temp_f_2).state >= id(range_warm).state) {
        return {"Warm"};
      }     
      else {
        return {"Unknown"};
      }

  # Conductivity Raw Value
  - platform: template
    name: EC - Raw Value
    id: raw_value_ec
    update_interval: never
    disabled_by_default: true
    entity_category: "Config"
    on_value: 
      then:
        - component.update: sensor_salinity
        - component.update: sensor_conductivity
        - component.update: sensor_tds
        - component.update: sensor_specific_gravity

button:
  # Soft Restart
  - platform: restart
    name: "Restart"

  # Facroty Reset
  - platform: factory_reset
    name: Factory Reset (USE WITH CAUTION)
    disabled_by_default: true

  # Safe Mode Restart
  - platform: safe_mode
    name: "Restart in Safe Mode"
    id: restart_safe
    disabled_by_default: false

  # Shutdown
  - platform: shutdown
    name: "Shutdown"
    disabled_by_default: true

  # EC
  # Output Parameters
  # Output All
  - platform: template
    name: "EC - Output - All"
    id: ec_all
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,EC,1");
            id(ec_ezo).send_custom("O,TDS,1");
            id(ec_ezo).send_custom("O,S,1");
            id(ec_ezo).send_custom("O,SG,1");
    entity_category: "Config"
    disabled_by_default: true

  # Output Salinity
  - platform: template
    name: "EC - Output - Salinity"
    id: ec_sal
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,EC,0");
            id(ec_ezo).send_custom("O,TDS,0");
            id(ec_ezo).send_custom("O,S,1");
            id(ec_ezo).send_custom("O,SG,0");
    entity_category: "Config"
    disabled_by_default: true
            
  # Output Specific Gravity
  - platform: template
    name: "EC - Output - Specific Gravity"
    id: ec_sg
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,EC,0");
            id(ec_ezo).send_custom("O,TDS,0");
            id(ec_ezo).send_custom("O,S,0");
            id(ec_ezo).send_custom("O,SG,1");
    entity_category: "Config"
    disabled_by_default: true

  # Output Conductivity
  - platform: template
    name: "EC - Output - Conductivity"
    id: ec_cond
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,EC,1");
            id(ec_ezo).send_custom("O,TDS,0");
            id(ec_ezo).send_custom("O,S,0");
            id(ec_ezo).send_custom("O,SG,0");
    entity_category: "Config"
    disabled_by_default: true

  # Read pH Probe
  - platform: template
    name: pH - Read
    id: read_ph
    entity_category: "Config"
    disabled_by_default: true
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("R");

  # Read Conductivity Probe
  - platform: template
    name: EC - Read
    id: read_ec
    entity_category: "Config"
    disabled_by_default: true
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("R");

number:
  # Temperature when Cool
  - platform: template
    name: "Temp. Cool"
    id: range_cool
    icon: mdi:water-thermometer
    optimistic: true
    mode: box
    min_value: 0.0
    max_value: 100.0
    step: 0.5
    restore_value: True
    initial_value: 72
    entity_category: "Config"
    on_value: 
      then:
        - component.update: temp_range
        - component.update: temp_range_2

  # Temperature when Warm
  - platform: template
    name: "Temp. Warm"
    icon: mdi:water-alert
    id: range_warm
    optimistic: true
    mode: box
    min_value: 0.0
    max_value: 100.0
    step: 0.5
    restore_value: True
    initial_value: 82
    entity_category: "Config"
    on_value: 
      then:
        - component.update: temp_range
        - component.update: temp_range_2