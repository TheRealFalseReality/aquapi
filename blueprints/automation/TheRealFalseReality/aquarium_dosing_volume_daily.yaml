blueprint:
  name: Aquarium - Dosing Volume Daily
  description: Turn on a switch to activate doser equipment for a certain amount of
    time based on volume and given dose rate each day. [More Info](https://community.home-assistant.io/t/aquarium-turn-on-a-switch-to-activate-doser-equipment-for-a-certain-amount-of-volume-or-time/600546)
    (v1.3.4) [Automation]
  domain: automation
  source_url: https://github.com/TheRealFalseReality/aquapi/blob/main/blueprints/automation/TheRealFalseReality/aquarium_dosing_volume_daily.yaml
  input:
    condition:
      name: Add Condition(s)
      description: Add conditions if needed
      default: []
      selector:
        condition: {}
    doseName:
      name: Dose Name
      description: Name of what you are dosing (ex. Marine Trace).
      selector:
        text:
          multiple: false
          multiline: false
    doseSwitch:
      name: Doser Switch
      description: Switch that activates the Doser Equipment. Make a Group Helper
        switch for multiple switches.
      selector:
        entity:
          domain:
          - switch
          multiple: true
    doseRate:
      description: Calibrated dosing rate of doser equipment (in mL/min). BRS 2-part
        doser is 1.1 mL/min.
      name: Dosing Rate (mL/min)
      default: 1.1
      selector:
        number:
          min: 0.1
          max: 105.0
          unit_of_measurement: mL/min
          mode: box
          step: 0.1
    doseAmount:
      description: Amount to dose (in mL).
      name: Dosing Amount (mL)
      default: 10
      selector:
        number:
          min: 0.5
          max: 1000.0
          unit_of_measurement: mL
          mode: box
          step: 0.5
    time_start:
      name: Time to Start
      description: Time to start the Dose every day.
      default: '10:00:00'
      selector:
        time: {}
    doseTime_max:
      name: Dose Max Time
      description: 'Max time for the doser to be on, will automatically turn off Doser
        Switch after the set time has passed. Prevents Doser from overdosing. (Default:
        1hr)'
      default:
        hours: 1
      selector:
        duration: {}
    doseTime_max_1:
      name: Dose Max Time Fallback
      description: 'Max time for the doser to be on, will automatically turn off Doser
        Switch after the set time has passed. Prevents Doser from overdosing in case
        the first trigger fails. (Default: 24hrs)'
      default:
        hours: 6
      selector:
        duration: {}
    doseTime_max_2:
      name: Dose Max Time Failsafe
      description: 'Max time for the doser to be on, will automatically turn off Doser
        Switch after the set time has passed. Prevents Doser from overdosing in case
        the first and second trigger fails. (Default: 48hrs)'
      default:
        hours: 12
      selector:
        duration: {}
    notify:
      name: Persistent Notification (Recommended)
      description: Notify Home Assistant when script is executed.
      default: true
      selector:
        boolean: {}
    additional_actions:
      name: Additional Actions
      description: "Add additional actions to the script. Will execute before everything
        else.\nVariables: doseName, condition, doseSwitch, doseRate, doseAmount, doseTime,
        notify_title, notify_message, notify_title_fail, notify_message_fail.\n- Example:
        To send to Mobile Device using the official Home Assistant App:\n\n  Notifications
        -> Send a notification via mobile.YOUR_DEVICE_NAME\n  ```\n  service: notify.YOUR_DEVICE_NAME\n
        \ metadata: {}\n  data:\n    message: \"{{ notify_message }}\"\n    title:
        \"{{ notify_title }}\"\n  ```\n\n  Copy {{ notify_message }} into `message`.
        This will switch to \"yaml\" mode. Above is a completed example.\n"
      default: []
      selector:
        action: {}
trigger:
- platform: time
  at: !input time_start
  id: trigger_time
- platform: state
  entity_id: !input doseSwitch
  from: 'off'
  to: 'on'
  id: trigger_on
- platform: state
  entity_id: !input doseSwitch
  from: unknown
  to: 'on'
- platform: state
  entity_id: !input doseSwitch
  from: unavailable
  to: 'on'
- platform: state
  entity_id: !input doseSwitch
  id: trigger_off
  to: 'off'
- platform: state
  entity_id: !input doseSwitch
  to: 'on'
  for: !input doseTime_max
  id: max_time
- platform: state
  entity_id: !input doseSwitch
  to: 'on'
  for: !input doseTime_max_1
  id: max_time
- platform: state
  entity_id: !input doseSwitch
  to: 'on'
  for: !input doseTime_max_2
  id: max_time
variables:
  condition: !input condition
  doseName: !input doseName
  doseSwitch: !input doseSwitch
  doseRate: !input doseRate
  doseAmount: !input doseAmount
  doseTime_max: !input doseTime_max
  doseTime_max_1: !input doseTime_max_1
  doseTime_max_2: !input doseTime_max_2
  doseTime: '{{ doseAmount / doseRate }}'
  time_start: !input time_start
  duration: 'Duration: {{ (doseTime | float * 60) | int // 3600 }} hours, {{ (doseTime
    | float * 60) | int % 3600 // 60 }} minutes, {{ (doseTime | float * 60) | int
    % 60 }} seconds.'
  notify_title: '{{ doseName }}'
  notify_message: Dosing {{ doseAmount }}mL of {{ doseName }}. {{ duration }}
  notify_title_fail: '{{ doseName }} Failed'
  notify_message_fail: 'Failed to dose {{ doseName }} due to conditions not passing.\n
    Conditions: {{ condition }}'
  additional_actions: !input additional_actions
  notify: !input notify
  notify_message_fail_max: "Dose Time Exceeded for {{ doseName }}. Switch should have been switched Off to prevent overdosing."
  notify_title_fail_max: "Dose Time Exceeded"
action:
- if:
  - condition: !input condition
  then:
  - choose:
    - conditions:
      - condition: trigger
        id: max_time
      sequence:
      - service: switch.turn_off
        metadata: {}
        data: {}
        entity_id: !input doseSwitch
      - service: notify.persistent_notification
        data:
          message: '{{ notify_message_fail_max }}'
          title: '{{ notify_title_fail_max }}'
    default:
    - choose: []
      default: !input additional_actions
    - service: switch.turn_on
      data: {}
      entity_id: !input doseSwitch
    - if:
      - condition: and
        conditions:
        - condition: template
          value_template: '{{ notify }}'
        - condition: trigger
          id: trigger_on
      then:
      - service: notify.persistent_notification
        data:
          message: '{{ notify_message }}'
          title: '{{ notify_title }}'
    - delay:
        hours: 0
        minutes: '{{ doseTime }}'
        seconds: 0
        milliseconds: 0
    - service: switch.turn_off
      data: {}
      entity_id: !input doseSwitch
  else:
  - if:
    - condition: template
      value_template: '{{ notify }}'
    then:
    - service: notify.persistent_notification
      data:
        message: '{{ notify_message_fail }}'
        title: '{{ notify_title_fail }}'
mode: restart
