substitutions:
  # Import Config
  import_config: "false"
  # Logger Level - Can use VERBOSE for more information in Logs
  logger: "DEBUG"

  # I2C pins
  sdaPin: "21" # yellow
  sclPin: "22" # blue

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  # Automatically add the mac address to the name
  name_add_mac_suffix: true
  comment: "AquaPi ESP32 - Aquarium Controller & Monitor"
  project:
    name: TheRealFalseReality.aquapi
    version: "${app_version}"

esp32:
  board: esp32dev
  framework:
    type: arduino

dashboard_import:
  package_import_url: github://TheRealFalseReality/aquapi/aquapi_config.yaml@main
  import_full_config: ${import_config}

# Enable logging
logger:
  level: "${logger}"

api:

ota:

wifi: 
  ap:

captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user to provision wifi credentials to the device.
esp32_improv:
  authorizer: none
  
improv_serial:

# i2c Pins
i2c:
  sda: ${sdaPin}
  scl: ${sclPin}
  scan: true
  id: bus_a

# Internal Blue LED
light:
  - platform: status_led
    id: internal_led
    pin: GPIO2

sensor:
  # Internal Magnetic Sensor
  - platform: esp32_hall
    name: "ESP32 Hall Sensor"
    entity_category: "diagnostic"

  # Internal Temp.
  - platform: internal_temperature
    name: "Internal Temperature"

  # Wifi Signal 
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    # name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  # Wifi %
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

    # Uptime sensor
  - platform: uptime
    name: Uptime 

  # of I2C devices connected
  - platform: template
    name: "I2C Devices Connected"
    id: i2c_devices
    icon: mdi:integrated-circuit-chip
    entity_category: "diagnostic"
    disabled_by_default: true
    lambda: |-
      byte error, address;
      int nDevices;
      nDevices = 0;
      for(address = 1; address < 127; address++) {
        Wire.beginTransmission(address);
        error = Wire.endTransmission();
        if (error == 0) {
          nDevices++;
        }
      }
      return nDevices;

binary_sensor:
  # API Status
  - platform: status
    name: "Status"

text_sensor: 
  # Hostname
  - platform: template
    name: "Hostname"
    id: hostname
    icon: mdi:cellphone-arrow-down
    lambda: |-
      return {"${name}"};
    entity_category: "diagnostic"

  # Wifi Info
  - platform: wifi_info
    ip_address:
      name: IP Address
      icon: mdi:ip-network
    ssid:
      name: Connected SSID
      icon: mdi:wifi-arrow-left-right
    bssid:
      name: Connected BSSID
      icon: mdi:wifi-star
      disabled_by_default: true
    mac_address:
      name: Mac Address
      icon: mdi:chip

button:
  # Soft Restart
  - platform: restart
    name: "Restart"

  # Factory Reset
  - platform: factory_reset
    name: Factory Reset (USE WITH CAUTION)
    disabled_by_default: true

  # Safe Mode Restart
  - platform: safe_mode
    name: "Restart in Safe Mode"
    id: restart_safe
    
  # Shutdown
  - platform: shutdown
    name: "Shutdown"
    disabled_by_default: true