substitutions:
  temp_name: Temperature 2
  temp_id: ${temp_id}
  temp_address: ''

  # Calibration variables
  # 0C using Ice Water; 100C using Boiling Water
  # # Calibration Temp. 2
  cal_0_${temp_id}: "0.0"
  cal_100_${temp_id}: "100.0"

sensor:
  # Temperature Probe 2
  - platform: dallas_temp
    id: ${temp_id}
    icon: mdi:thermometer-lines
    address: ${temp_address}
    name: ${temp_name}
    state_class: "measurement"
    device_class: "temperature"
    filters:
      - calibrate_linear:
          method: least_squares
          datapoints:
            - 0.0 -> ${cal_0_${temp_id}}
            - 100.0 -> ${cal_100_${temp_id}}
    disabled_by_default: true
    on_value: 
      then:
        - component.update: range_${temp_id}

  # Convert to Fahrenheit - Temp. 2
  - platform: template
    state_class: "measurement"
    device_class: "temperature"
    id: fah_${temp_id}
    lambda: |-
      return id(${temp_id}).state * 9 / 5 + 32;

  # Calibration Temp. 2 at 0C
  - platform: template
    name: Calibration at 0째C  - ${temp_name}
    id: cal_0_${temp_id}_sen
    icon: mdi:snowflake-alert
    unit_of_measurement: "째C"
    disabled_by_default: true
    state_class: "measurement"
    device_class: "temperature"
    entity_category: "diagnostic"
    lambda: |-
      return {${cal_0_${temp_id}}};

  # Calibration Temp. 2 at 100C
  - platform: template
    name: Calibration at 100째C - Temp. 2
    id: cal_100_${temp_id}_sen
    icon: mdi:water-thermometer
    unit_of_measurement: "째C"
    disabled_by_default: true
    state_class: "measurement"
    device_class: "temperature"
    entity_category: "diagnostic"
    lambda: |-
      return {${cal_100_${temp_id}}};

binary_sensor:
  - platform: template
    name: Ideal Temperature 2
    id: ideal_${temp_id}
    icon: mdi:thermometer-check
    disabled_by_default: true
    lambda: |-
      if (id(range_${temp_id}).state == "OK") {
        return true;
      } else {
        return false;
      }

text_sensor:
  # Temperature Range 2
  - platform: template
    name: Temperature 2 Range
    id: range_${temp_id}
    icon: mdi:thermometer-water
    update_interval: "${update_temp}"
    disabled_by_default: true
    lambda: |-
      if(id(fah_${temp_id}).state <= id(range_cool_${temp_id}).state) {
        return {"Cool"};
      }
      if(id(fah_${temp_id}).state < id(range_cool_${temp_id}).state && id(fah_${temp_id}).state > id(range_cool_${temp_id}).state) {
        return {"OK"};
      }
      if(id(fah_${temp_id}).state >= id(range_cool_${temp_id}).state) {
        return {"Warm"};
      }     
      else {
        return {"Unknown"};
      }

number:
  # Temperature 2 when Cool
  - platform: template
    name: "${temp_name} Cool"
    id: range_cool_${temp_id}
    icon: mdi:snowflake-thermometer
    optimistic: true
    disabled_by_default: true
    mode: box
    min_value: 0.0
    max_value: 100.0
    step: 0.5
    restore_value: True
    initial_value: ${range_cool}
    entity_category: "Config"
    device_class: "temperature"
    on_value: 
      then:
        - component.update: range_${temp_id}

  # Temperature 2 when Warm
  - platform: template
    name: "${temp_name} Warm"
    icon: mdi:sun-thermometer
    id: range_cool_${temp_id}
    optimistic: true
    disabled_by_default: true
    mode: box
    min_value: 0.0
    max_value: 100.0
    step: 0.5
    restore_value: True
    initial_value: ${range_warm}
    entity_category: "Config"
    device_class: "temperature"
    on_value: 
      then:
        - component.update: range_${temp_id}