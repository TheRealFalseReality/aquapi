substitutions:
  # CO2 circuit, who's address is 105
  addCO2: "105"
  update_co2: "60s"
  update_button_co2: "60s"

esphome:
    on_boot: 
        priority: 200
        then:
          - button.press: read_co2
          - button.press: send_selected_co2

interval:
  # Update Raw CO2
  - interval: "${update_button_co2}"
    then:
      - button.press: read_co2

sensor:
  # EZO Circuits (yellow - SCL/RX, blue - SDA/TX)
  # EZO Circuit - CO2
  # Cardbon Dioxide
  - platform: ezo
    icon: mdi:molecule-co2
    name: "Cardbon Dioxide"
    id: co2_ezo
    address: ${addCO2}
    unit_of_measurement: "ppm"
    accuracy_decimals: 0
    update_interval: "${update_co2}"
    state_class: "measurement"
    device_class: "carbon_dioxide"
    on_custom: 
      then:
        - lambda: 
            id(raw_value_co2).publish_state(x);
    on_calibration: 
      then:
        - lambda: 
            id(result_co2).publish_state(x);
    on_device_information: 
      then:
        - lambda: 
            id(result_co2).publish_state(x);
    on_slope: 
      then:
        - lambda: 
            id(result_co2).publish_state(x);
    on_t: 
      then:
        - lambda: 
            id(result_co2).publish_state(x);

  # Internal Temperature
  - platform: template
    name: CO2 Internal Temperature
    id: sensor_co2_internal_temperature
    accuracy_decimals: 2
    unit_of_measurement: "Â°C"
    update_interval: "${update_co2}"
    entity_category: "diagnostic"
    state_class: "measurement"
    device_class: "temperature"
    lambda: |-
      std::string str = id(raw_value_co2).state;
      std::vector<std::string> v;
      char * token;
      char seps[] = ",";
      token = strtok (&str[0],seps);
      while (token != NULL) {
        v.push_back(token);
        token = strtok (NULL, seps);
      }
      if (v.size() == 2) {
        return std::stof(v[1]);
      } 
      else {
        return NAN;
      }

text_sensor:
  # CO2 Raw Value
  - platform: template
    name: CO2 - Raw Value
    icon: mdi:counter
    id: raw_value_co2
    disabled_by_default: true
    on_value: 
      then:
        - component.update: sensor_co2_internal_temperature

  # Selected Command Result - CO2
  - platform: template
    name: CO2 - Command Result
    id: result_co2
    disabled_by_default: true

button:
  # Read CO2 Sensor
  - platform: template
    name: CO2 - Read
    id: read_co2
    entity_category: "Config"
    disabled_by_default: true
    on_press:
      then:
        - lambda: |-
            byte error;
            Wire.beginTransmission(${addCO2});
            error = Wire.endTransmission();
            if (error == 0) {
              id(co2_ezo).send_custom("R");
            }
            else {
              ESP_LOGW("custom_co2_read", "No Carbon Dioxide sensor detected at address: ${addCO2}!!");
            }

  # Send Selected EZO Command - CO2
  - platform: template
    name: CO2 - Command Send Selected
    id: send_selected_co2
    entity_category: "Config"
    disabled_by_default: true
    on_press:
      then:
        - lambda: |-
            if (id(select_command_co2).state == "Read") {
              id(co2_ezo).send_custom("R");
            }
            if (id(select_command_co2).state == "Information") {
              id(co2_ezo).get_device_information();
            }
            if (id(select_command_co2).state == "Status") {
              id(co2_ezo).send_custom("Status");
            }
            if (id(select_command_co2).state == "Get Enabled Parameter(s)") {
              id(co2_ezo).send_custom("O,?");
            }  
            if (id(select_command_co2).state == "Output Units - Enable Temperature") {
              id(co2_ezo).send_custom("O,t,1");
            }
            if (id(select_command_co2).state == "Output Units - Disable Temperature") {
              id(co2_ezo).send_custom("O,t,0");
            }
            if (id(select_command_co2).state == "Check Calibration") {
              id(co2_ezo).get_calibration();
            }
            else {
              id(co2_ezo).send_custom("R");
            }

select:
  - platform: template
    name: CO2 - Command Select
    id: select_command_co2
    disabled_by_default: true
    optimistic: true
    entity_category: "Config"
    options:
      - "Read"
      - "Information"
      - "Status"
      - "Get Enabled Parameter(s)"
      - "Output Units - Enable Temperature"
      - "Output Units - Disable Temperature"
      - "Check Calibration"
    initial_option: "Check Calibration"
    set_action:
      - logger.log:
          format: "Chosen option: %s"
          args: ["x.c_str()"]