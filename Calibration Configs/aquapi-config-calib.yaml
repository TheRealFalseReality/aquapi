# These substitutions allow the end user to override certain values
substitutions:
  name: "aquapi-calibration"
  friendly_name: "AquaPi Calibration"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true
  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: TheRealFalseReality.aquapi
    version: "1.13c"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: verbose

# Enable Home Assistant API
api:

ota:

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://TheRealFalseReality/aquapi/aquapi_config.yaml@main
  # import_full_config: true

wifi:
  ap:
    password: "password"

captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none
  
improv_serial:

# i2c Pins
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

# Internal Blue LED
light:
  - platform: status_led
    name: "Internal LED"
    pin: GPIO2

# 18B20 sensor Pin
dallas:
  - pin: 16
    
sensor:
  # Internal Magnetic Sensor
  - platform: esp32_hall
    name: "ESP32 Hall Sensor"
    update_interval: 60s

  # Internal Temp.
  - platform: internal_temperature
    name: "Internal Temperature"

  # Wifi Signal 
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  # Wifi %
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  # Uptime sensor
  - platform: uptime
    name: Uptime Sensor    

  # EZO Circuits (yellow - SCL/RX, blue - SDA/TX)
  # EZO Circuit - pH
  - platform: ezo
    icon: mdi:ph
    name: "pH"
    id: ph_ezo
    address: 99
    unit_of_measurement: ""
    accuracy_decimals: 2
    update_interval: 60s
    state_class: "measurement"

  # EZO Circuit - EC
  # Salinity
  - platform: ezo
    icon: mdi:shaker-outline
    name: "Salinity"
    id: ec_ezo
    address: 100
    unit_of_measurement: "ppt"
    accuracy_decimals: 2
    update_interval: 60s
    state_class: "measurement"

  # Specific Gravity
  - platform: ezo
    icon: mdi:shaker-outline
    name: "Specific Gravity"
    id: ec_ezo_sg
    address: 100
    unit_of_measurement: ""
    accuracy_decimals: 3
    update_interval: 60s
    state_class: "measurement"

  # # DHT
  # - platform: absolute_humidity
  #   name: Absolute Humidity
  #   temperature: air_temperature
  #   humidity: relative_humidity

  # # - platform: dht
  #   pin: 5
  #   temperature:
  #     name: "Temperature"
  #     id: air_temperature
  #   humidity:
  #     name: "Humidity"
  #     id: relative_humidity
  #   update_interval: 60s

  # Temperature Probes
  - platform: dallas
    # address: 0xe58000003203d628
    index: 0
    name: "Temperature"

  - platform: dallas
    # address: 0xe58000003203d628
    index: 1
    name: "Temperature 2"

binary_sensor:
  # Optical Sensor - LOW (yellow)
  - platform: gpio
    id: os_low
    pin: 
      number: 32
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Optical Sensor: Low"
    filters:
      - delayed_on: 30ms

  # Optical Sensor - HIGH (blue)
  - platform: gpio
    id: os_high
    pin: 
      number: 33
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Optical Sensor: High"
    filters:
      - delayed_on: 30ms

text_sensor:
  # Water Level
  - platform: template
    name: "Water Level"
    id: water_level
    lambda: |-
      if(id(os_high).state == true && id(os_low).state == true) {
        // Water Level is High
        return {"High"};
      }
      if(id(os_high).state == false && id(os_low).state == false) {
        // Water Level is Low
        return {"Low"};
      }
      if(id(os_high).state == false && id(os_low).state == true) {
        // Water Level is Normal
        return {"Normal"};
      } else {
        return {"Uknown or Error"};
      }

button:
  # Soft Restart
  - platform: restart
    name: "Restart"
  # # Soft Shutdown
  # - platform: shutdown
  #   name: "Shutdown"
  # # Safe Mode
  # - platform: safe_mode
  #   name: "Safe Mode"

  # EC
  # Output Parameters
  # Output Salinity
  - platform: template
    name: "EC - Output - Salinity"
    id: ec_sal
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,EC,0");
            id(ec_ezo).send_custom("O,TDS,0");
            id(ec_ezo).send_custom("O,S,1");
            id(ec_ezo).send_custom("O,SG,0");
            
  # Output Specific Gravity
  - platform: template
    name: "EC - Output - Specific Gravity"
    id: ec_sg
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,EC,0");
            id(ec_ezo).send_custom("O,TDS,0");
            id(ec_ezo).send_custom("O,S,0");
            id(ec_ezo).send_custom("O,SG,1");

  # Output Conductivity
  - platform: template
    name: "EC - Output - Conductivity"
    id: ec_cond
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,EC,1");
            id(ec_ezo).send_custom("O,TDS,0");
            id(ec_ezo).send_custom("O,S,0");
            id(ec_ezo).send_custom("O,SG,0");

  # Output TDS
  - platform: template
    name: "EC - Output - TDS"
    id: ec_tds
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,EC,0");
            id(ec_ezo).send_custom("O,TDS,1");
            id(ec_ezo).send_custom("O,S,0");
            id(ec_ezo).send_custom("O,SG,0");

  # Get Device Firmware Version
  - platform: template
    name: "EC - Get Information"
    id: ec_info
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).get_device_information();

  # Set Probe Type K1
  - platform: template
    name: "EC - Set Probe Type K1"
    id: ec_probe_type
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("K,1");

  # Get Probe Value
  - platform: template
    name: "EC - Get Probe Value"
    id: ec_probe_value
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("K,?");

  # Manual Read
  - platform: template
    name: "EC - Manual Read"
    id: ec_read
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).get_state();

  # Perform Calibration 0.00
  - platform: template
    name: "EC - Calibration - 0"
    id: ec_cal_0
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).set_calibration_generic(0.00);

  # Perform Calibration low 12880
  - platform: template
    name: "EC - Calibration - low 12880"
    id: ec_cal_low
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).set_calibration_point_low(12880.00);

  # Perform Calibration high 80000
  - platform: template
    name: "EC - Calibration - high 80000"
    id: ec_cal_high
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).set_calibration_point_high(80000.00);

  # Perform Calibration CLEAR
  - platform: template
    name: "EC - Calibration Clear"
    id: ec_cal_clear
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).clear_calibration();

  # Perform Calibration Check
  - platform: template
    name: "EC - Calibration - check"
    id: ec_cal_check
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).get_calibration();

  # Perform Status Check
  - platform: template
    name: "EC - Staus Check"
    id: ec_status
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("Status");

  # Get TDS Value
  - platform: template
    name: "EC - TDS Value"
    id: ec_tds_value
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("TDS,?");

  # Output Values
  # Get Enabled Parameter(s)
  - platform: template
    name: "EC - Get Enabled Parameter(s)"
    id: ec_param
    on_press:
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,?");

  # pH
  # Get Device Firmware Version
  - platform: template
    name: "pH - Get Information"
    id: ph_info
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("i");

  # Get Slope
  - platform: template
    name: "pH - Get Slope"
    id: ph_slope
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("Slope,?");

  # Manual Read
  - platform: template
    name: "pH - Manual Read"
    id: ph_read
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("R");

  # Perform Calibration - mid 7
  - platform: template
    name: "pH - Calibration - mid 7"
    id: ph_cal_mid
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("Cal,mid,7.00");

  # Perform Calibration low 4
  - platform: template
    name: "pH - Calibration - low 4"
    id: ph_cal_low
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("Cal,low,4.00");

  # Perform Calibration high 10
  - platform: template
    name: "pH - Calibration - high 10"
    id: ph_cal_high
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("Cal,low,10.00");

  # Perform Calibration CLEAR
  - platform: template
    name: "pH - Calibration Clear"
    id: ph_cal_clear
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("Cal,clear");

  # Perform Calibration Check
  - platform: template
    name: "pH - Calibration - check"
    id: ph_cal_check
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("Cal,?");

  # Perform Status Check
  - platform: template
    name: "pH - Staus Check"
    id: ph_status
    on_press:
      then:
        - lambda: |-
            id(ph_ezo).send_custom("Status");
